name: Development Build
# on:
#   pull_request:
#     branches: [dev]

#   push:
#     branches: [dev]

on: workflow_dispatch

jobs:
    Backend-Unit-Tests:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Code
            uses: actions/checkout@v2

          - name: Set up Python 3.9
            uses: actions/setup-python@v2
            with:
              python-version: 3.9

          - uses: actions/cache@v2
            with:
              path: ${{ env.pythonLocation }}
              key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}

          - name: Install dependencies
            working-directory: src/backend
            run: |
              python -m pip install --upgrade pip
              pip install pytest
              if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

          - name: Pytest Unit Tests
            run: |
              cd src/backend
              mv .env.example .env
              cd ../../
              pytest
              
    Frontend-Unit-Tests:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Code
            uses: actions/checkout@v2

          - uses: actions/setup-node@v2
            with:
              node-version: "14"
              registry-url: "https://npm.pkg.github.com/"
              scope: "@rrglobal"

          - name: Get yarn cache directory path
            id: yarn-cache-dir-path
            run: echo "::set-output name=dir::$(yarn cache dir)"

          - uses: actions/cache@v2
            id: yarn-cache
            with:
              path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
              key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
              restore-keys: |
                ${{ runner.os }}-yarn-
          - name: Install Dependencies
            working-directory: src/frontend
            run: yarn --prefer-offline
            env:
              NODE_AUTH_TOKEN: ${{ secrets.VUE_COBALT_PAT }}

          - name: Cypress Component Tests
            working-directory: src/frontend
            run: yarn cy-ct
            
    Integration-Tests:
        needs: [Frontend-Unit-Tests, Backend-Unit-Tests]
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Code
            uses: actions/checkout@v2

          - name: Setup Python 3.9
            uses: actions/setup-python@v2
            with:
              python-version: 3.9

          - name: Configure Backend Cache
            uses: actions/cache@v2
            with:
              path: ${{ env.pythonLocation }}
              key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}

          - name: Install Backend Dependencies
            working-directory: src/backend
            run: |
              python -m pip install --upgrade pip pytest
              if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

          - name: Run Backend
            working-directory: src/backend
            env:
              ENV: local
              DEBUG: False
              TESTING: True
              SECRET_KEY: secret_key
              ADMIN_KEY: admin_key
              FRONTEND_URL: http://localhost:3000
            run: |
              python -m uvicorn sfm.main:app --port 8181 &

          - name: Setup Frontend
            uses: actions/setup-node@v2
            with:
              node-version: "14"
              registry-url: "https://npm.pkg.github.com/"
              scope: "@rrglobal"

          - name: Configure Frontend Cache (1/2)
            id: yarn-cache-dir-path
            run: echo "::set-output name=dir::$(yarn cache dir)"

          - name: Configure Frontend Cache (2/2)
            uses: actions/cache@v2
            id: yarn-cache
            with:
              path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
              key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
              restore-keys: |
                ${{ runner.os }}-yarn-

          - name: Install Frontend Dependencies
            working-directory: src/frontend
            run: yarn --prefer-offline
            env:
              NODE_AUTH_TOKEN: ${{ secrets.VUE_COBALT_PAT }}

          - name: Cypress Integration Tests
            working-directory: src/frontend
            env:
              VITE_API_URL: "http://localhost:8181"
            run: |
              yarn cy
              
    Code-QL:
        needs: [Frontend-Unit-Tests, Backend-Unit-Tests]
        name: Code QL
        runs-on: ubuntu-latest
        permissions:
          actions: read
          contents: read
          security-events: write

        strategy:
          fail-fast: false
          matrix:
            language: ["python"]

        steps:
          - name: Checkout repository
            uses: actions/checkout@v2

          # Initializes the CodeQL tools for scanning.
          - name: Initialize CodeQL
            uses: github/codeql-action/init@v1
            with:
              languages: ${{ matrix.language }}

          - name: Autobuild
            uses: github/codeql-action/autobuild@v1

          - name: Perform CodeQL Analysis
            uses: github/codeql-action/analyze@v1
              
    Backend-Build:
      needs: [Integration-Tests, Code-QL]
      runs-on: ubuntu-latest
      steps:

       - name: Checkout repository
         uses: actions/checkout@v2
       - name: Login ACR
         uses: azure/docker-login@v1
         with:
          login-server: ${{ secrets.CRSFT_LOGIN_SERVER }}
          username: ${{ secrets.CRSFT_USERNAME}}
          password: ${{ secrets.CRSFT_PASSWORD }}
       - name: Build/Push Backend Container
         run: |
            docker build -t crsft.azurecr.us/sfm_backend_dev:latest src/backend
            docker push crsft.azurecr.us/sfm_backend_dev:latest

    Frontend-Build:
      needs: [Integration-Tests, Code-QL]
      runs-on: ubuntu-latest
      steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Login ACR
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.CRSFT_LOGIN_SERVER }}
          username: ${{ secrets.CRSFT_USERNAME}}
          password: ${{ secrets.CRSFT_PASSWORD }}
      - name: Build/Push Frontend Container
        run: |
          docker build --build-arg NODE_AUTH_TOKEN=${{ secrets.VUE_COBALT_PAT }} -t crsft.azurecr.us/sfm_frontend_dev:latest src/frontend
          docker push crsft.azurecr.us/sfm_frontend_dev:latest

